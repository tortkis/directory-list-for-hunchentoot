a simple directory listing macro for Hunchentoot.

Syntax:

define-directory-list (uri base-path &key (show-path nil)
                       (default-content-type "text/plain; charset=utf-8"))

define-directory-list macro defines an URI "uri" that shows the list
of files/directories in the relative directory specified by HTTP
parameter "path" under the absolute directory "base-path".

Example:

(define-directory-list "/dir1" "/Users/you/Music/")

This defines a dispatcher for hunchentoot that makes URI

    http://localhost/dir1?path=iTunes/

show the contents of the directory

    /Users/you/Music/iTunes/

See http://mtlhc.com/software/for-hunchentoot for a screenshot.

html-string:

define-directory-list uses a function html-string which converts a
S-expression to HTML.  It does not perform any HTML syntax check.  It
should be compatible with the expressions generated by CL-HTML-Parse,
which is the inverse of lml2.  So, lml2:html-print can be used for the
purpose. The reason I made this was that lml2:html-print did not
generate some end tags. For example:

* (lml2:html-print '((:button :type "submit") "OK") *standard-output*)
<BUTTON TYPE="submit">OK

* (princ (html-string:html-string '((:button :type "submit") "OK")))
<BUTTON TYPE="submit">OK</BUTTON>

However, actually lml2 can define whether a tag has its end tag or
not.  So, it turned out that this function is not needed, but I leave
it as it is for now.

* (lml2::def-std-html :button t nil)

* (lml2:html-print '((:button :type "submit") "OK") *standard-output*)
<BUTTON TYPE="submit">OK</BUTTON>


